<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lanjing.wallet.dao.AirdropMapper">
  <resultMap id="BaseResultMap" type="com.lanjing.wallet.model.Airdrop">
    <!--@mbg.generated-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
    <result column="rule" jdbcType="LONGVARCHAR" property="rule" />
    <result column="protocol" jdbcType="LONGVARCHAR" property="protocol" />
    <result column="summary" jdbcType="VARCHAR" property="summary" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="freeze_btc" jdbcType="DECIMAL" property="freezeBtc" />
    <result column="freeze_yyb" jdbcType="DECIMAL" property="freezeYyb" />
    <result column="free_btc" jdbcType="DECIMAL" property="freeBtc" />
    <result column="free_yyb" jdbcType="DECIMAL" property="freeYyb" />
    <result column="freed_btc" jdbcType="DECIMAL" property="freedBtc" />
    <result column="freed_yyb" jdbcType="DECIMAL" property="freedYyb" />
    <result column="cycle" jdbcType="INTEGER" property="cycle" />
    <result column="enable" jdbcType="INTEGER" property="enable" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="publisher" jdbcType="VARCHAR" property="publisher" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, introduction, `rule`, protocol, summary, `name`, amount, freeze_btc, freeze_yyb, 
    free_btc, free_yyb, freed_btc, freed_yyb, `cycle`, `enable`, start_time, end_time, 
    publisher, create_time, update_time
  </sql>
  <sql id="App_Column_List">
    <!--@mbg.generated-->
    id, summary, `name`,start_time
  </sql>
  <sql id="Admin_Column_List">
      id, introduction, `rule`, protocol, summary, `name`, amount, freeze_btc, freeze_yyb, free_btc, free_yyb,
      freed_btc, freed_yyb, `cycle`, `enable`, start_time, publisher, create_time
  </sql>
  <select id="selectByExample" parameterType="com.lanjing.wallet.model.AirdropExample" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from airdrop
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from airdrop
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from airdrop
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lanjing.wallet.model.AirdropExample">
    <!--@mbg.generated-->
    delete from airdrop
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.lanjing.wallet.model.Airdrop" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into airdrop (introduction, `rule`, protocol, 
      summary, `name`, amount, 
      freeze_btc, freeze_yyb, free_btc, 
      free_yyb, freed_btc, freed_yyb, 
      `cycle`, `enable`, start_time, 
      end_time, publisher, create_time, 
      update_time)
    values (#{introduction,jdbcType=LONGVARCHAR}, #{rule,jdbcType=LONGVARCHAR}, #{protocol,jdbcType=LONGVARCHAR}, 
      #{summary,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, 
      #{freezeBtc,jdbcType=DECIMAL}, #{freezeYyb,jdbcType=DECIMAL}, #{freeBtc,jdbcType=DECIMAL}, 
      #{freeYyb,jdbcType=DECIMAL}, #{freedBtc,jdbcType=DECIMAL}, #{freedYyb,jdbcType=DECIMAL}, 
      #{cycle,jdbcType=INTEGER}, #{enable,jdbcType=INTEGER}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{publisher,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.lanjing.wallet.model.Airdrop" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into airdrop
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="introduction != null">
        introduction,
      </if>
      <if test="rule != null">
        `rule`,
      </if>
      <if test="protocol != null">
        protocol,
      </if>
      <if test="summary != null">
        summary,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="freezeBtc != null">
        freeze_btc,
      </if>
      <if test="freezeYyb != null">
        freeze_yyb,
      </if>
      <if test="freeBtc != null">
        free_btc,
      </if>
      <if test="freeYyb != null">
        free_yyb,
      </if>
      <if test="freedBtc != null">
        freed_btc,
      </if>
      <if test="freedYyb != null">
        freed_yyb,
      </if>
      <if test="cycle != null">
        `cycle`,
      </if>
      <if test="enable != null">
        `enable`,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="publisher != null">
        publisher,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="rule != null">
        #{rule,jdbcType=LONGVARCHAR},
      </if>
      <if test="protocol != null">
        #{protocol,jdbcType=LONGVARCHAR},
      </if>
      <if test="summary != null">
        #{summary,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="freezeBtc != null">
        #{freezeBtc,jdbcType=DECIMAL},
      </if>
      <if test="freezeYyb != null">
        #{freezeYyb,jdbcType=DECIMAL},
      </if>
      <if test="freeBtc != null">
        #{freeBtc,jdbcType=DECIMAL},
      </if>
      <if test="freeYyb != null">
        #{freeYyb,jdbcType=DECIMAL},
      </if>
      <if test="freedBtc != null">
        #{freedBtc,jdbcType=DECIMAL},
      </if>
      <if test="freedYyb != null">
        #{freedYyb,jdbcType=DECIMAL},
      </if>
      <if test="cycle != null">
        #{cycle,jdbcType=INTEGER},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="publisher != null">
        #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lanjing.wallet.model.AirdropExample" resultType="java.lang.Long">
    <!--@mbg.generated-->
    select count(*) from airdrop
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbg.generated-->
    update airdrop
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.introduction != null">
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.rule != null">
        `rule` = #{record.rule,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.protocol != null">
        protocol = #{record.protocol,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.summary != null">
        summary = #{record.summary,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeBtc != null">
        freeze_btc = #{record.freezeBtc,jdbcType=DECIMAL},
      </if>
      <if test="record.freezeYyb != null">
        freeze_yyb = #{record.freezeYyb,jdbcType=DECIMAL},
      </if>
      <if test="record.freeBtc != null">
        free_btc = #{record.freeBtc,jdbcType=DECIMAL},
      </if>
      <if test="record.freeYyb != null">
        free_yyb = #{record.freeYyb,jdbcType=DECIMAL},
      </if>
      <if test="record.freedBtc != null">
        freed_btc = #{record.freedBtc,jdbcType=DECIMAL},
      </if>
      <if test="record.freedYyb != null">
        freed_yyb = #{record.freedYyb,jdbcType=DECIMAL},
      </if>
      <if test="record.cycle != null">
        `cycle` = #{record.cycle,jdbcType=INTEGER},
      </if>
      <if test="record.enable != null">
        `enable` = #{record.enable,jdbcType=INTEGER},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.publisher != null">
        publisher = #{record.publisher,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbg.generated-->
    update airdrop
    set id = #{record.id,jdbcType=INTEGER},
      introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      `rule` = #{record.rule,jdbcType=LONGVARCHAR},
      protocol = #{record.protocol,jdbcType=LONGVARCHAR},
      summary = #{record.summary,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      freeze_btc = #{record.freezeBtc,jdbcType=DECIMAL},
      freeze_yyb = #{record.freezeYyb,jdbcType=DECIMAL},
      free_btc = #{record.freeBtc,jdbcType=DECIMAL},
      free_yyb = #{record.freeYyb,jdbcType=DECIMAL},
      freed_btc = #{record.freedBtc,jdbcType=DECIMAL},
      freed_yyb = #{record.freedYyb,jdbcType=DECIMAL},
      `cycle` = #{record.cycle,jdbcType=INTEGER},
      `enable` = #{record.enable,jdbcType=INTEGER},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      publisher = #{record.publisher,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lanjing.wallet.model.Airdrop">
    <!--@mbg.generated-->
    update airdrop
    <set>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="rule != null">
        `rule` = #{rule,jdbcType=LONGVARCHAR},
      </if>
      <if test="protocol != null">
        protocol = #{protocol,jdbcType=LONGVARCHAR},
      </if>
      <if test="summary != null">
        summary = #{summary,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="freezeBtc != null">
        freeze_btc = #{freezeBtc,jdbcType=DECIMAL},
      </if>
      <if test="freezeYyb != null">
        freeze_yyb = #{freezeYyb,jdbcType=DECIMAL},
      </if>
      <if test="freeBtc != null">
        free_btc = #{freeBtc,jdbcType=DECIMAL},
      </if>
      <if test="freeYyb != null">
        free_yyb = #{freeYyb,jdbcType=DECIMAL},
      </if>
      <if test="freedBtc != null">
        freed_btc = #{freedBtc,jdbcType=DECIMAL},
      </if>
      <if test="freedYyb != null">
        freed_yyb = #{freedYyb,jdbcType=DECIMAL},
      </if>
      <if test="cycle != null">
        `cycle` = #{cycle,jdbcType=INTEGER},
      </if>
      <if test="enable != null">
        `enable` = #{enable,jdbcType=INTEGER},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="publisher != null">
        publisher = #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lanjing.wallet.model.Airdrop">
    <!--@mbg.generated-->
    update airdrop
    set introduction = #{introduction,jdbcType=LONGVARCHAR},
      `rule` = #{rule,jdbcType=LONGVARCHAR},
      protocol = #{protocol,jdbcType=LONGVARCHAR},
      summary = #{summary,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      freeze_btc = #{freezeBtc,jdbcType=DECIMAL},
      freeze_yyb = #{freezeYyb,jdbcType=DECIMAL},
      free_btc = #{freeBtc,jdbcType=DECIMAL},
      free_yyb = #{freeYyb,jdbcType=DECIMAL},
      freed_btc = #{freedBtc,jdbcType=DECIMAL},
      freed_yyb = #{freedYyb,jdbcType=DECIMAL},
      `cycle` = #{cycle,jdbcType=INTEGER},
      `enable` = #{enable,jdbcType=INTEGER},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      publisher = #{publisher,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="findByNameLikeAndEnable" resultMap="BaseResultMap">
    select
    <include refid="Admin_Column_List" />
    from airdrop
    where enable!=-1
    <if test="likeName != null and likeName != ''">
      and `name` like concat('%',#{likeName,jdbcType=VARCHAR},'%')
    </if>
    <if test="enable != null">
      and `enable`=#{enable,jdbcType=INTEGER}
    </if>
  </select>

  <select id="findByAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from airdrop
        where enable!=-1
        <if test="id != null">
            and id=#{id,jdbcType=INTEGER}
        </if>
        <if test="introduction != null">
            and introduction=#{introduction,jdbcType=LONGVARCHAR}
        </if>
        <if test="rule != null">
            and `rule`=#{rule,jdbcType=LONGVARCHAR}
        </if>
        <if test="protocol != null">
            and protocol=#{protocol,jdbcType=LONGVARCHAR}
        </if>
        <if test="name != null">
            and `name`=#{name,jdbcType=VARCHAR}
        </if>
        <if test="amount != null">
            and amount=#{amount,jdbcType=DECIMAL}
        </if>
        <if test="freezeBtc != null">
            and freeze_btc=#{freezeBtc,jdbcType=DECIMAL}
        </if>
        <if test="freeBtc != null">
            and free_btc=#{freeBtc,jdbcType=DECIMAL}
        </if>
        <if test="freeYyb != null">
            and free_yyb=#{freeYyb,jdbcType=DECIMAL}
        </if>
        <if test="freedBtc != null">
            and freed_btc=#{freedBtc,jdbcType=DECIMAL}
        </if>
        <if test="freedYyb != null">
            and freed_yyb=#{freedYyb,jdbcType=DECIMAL}
        </if>
        <if test="cycle != null">
            and `cycle`=#{cycle,jdbcType=INTEGER}
        </if>
        <if test="enable != null">
            and `enable`=#{enable,jdbcType=INTEGER}
        </if>
        <if test="startTime != null">
            and start_time=#{startTime,jdbcType=TIMESTAMP}
        </if>
        <if test="endTime != null">
            and end_time=#{endTime,jdbcType=TIMESTAMP}
        </if>
        <if test="publisher != null">
            and publisher=#{publisher,jdbcType=VARCHAR}
        </if>
        <if test="createTime != null">
            and create_time=#{createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="updateTime != null">
            and update_time=#{updateTime,jdbcType=TIMESTAMP}
        </if>
    </select>

    <update id="delByPrimaryKeys" parameterType="string">
      update airdrop
      set enable = -1
      where find_in_set(id,#{ids,jdbcType=VARCHAR})
    </update>


  <update id="updateByIdAndEnable">
    update airdrop set
    <set>
      <if test="updated.id != null">
        id = #{updated.id,jdbcType=INTEGER},
      </if>
      <if test="updated.introduction != null">
        introduction = #{updated.introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="updated.rule != null">
        rule = #{updated.rule,jdbcType=LONGVARCHAR},
      </if>
      <if test="updated.protocol != null">
        protocol = #{updated.protocol,jdbcType=LONGVARCHAR},
      </if>
      <if test="updated.name != null">
        name = #{updated.name,jdbcType=VARCHAR},
      </if>
      <if test="updated.amount != null">
        amount = #{updated.amount,jdbcType=DECIMAL},
      </if>
      <if test="updated.freezeBtc != null">
        freeze_btc = #{updated.freezeBtc,jdbcType=DECIMAL},
      </if>
      <if test="updated.freeBtc != null">
        free_btc = #{updated.freeBtc,jdbcType=DECIMAL},
      </if>
      <if test="updated.freeYyb != null">
        free_yyb = #{updated.freeYyb,jdbcType=DECIMAL},
      </if>
      <if test="updated.freedBtc != null">
        freed_btc = #{updated.freedBtc,jdbcType=DECIMAL},
      </if>
      <if test="updated.freedYyb != null">
        freed_yyb = #{updated.freedYyb,jdbcType=DECIMAL},
      </if>
      <if test="updated.cycle != null">
        cycle = #{updated.cycle,jdbcType=INTEGER},
      </if>
      <if test="updated.enable != null">
        enable = #{updated.enable,jdbcType=INTEGER},
      </if>
      <if test="updated.startTime != null">
        start_time = #{updated.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updated.endTime != null">
        end_time = #{updated.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updated.publisher != null">
        publisher = #{updated.publisher,jdbcType=VARCHAR},
      </if>
      <if test="updated.createTime != null">
        create_time = #{updated.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updated.updateTime != null">
        update_time = #{updated.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id=#{id,jdbcType=INTEGER} and `enable`=#{enable,jdbcType=INTEGER}
  </update>

  <update id="operateAirdrop">
    update airdrop set enable=#{enable,jdbcType=INTEGER} where id=#{id,jdbcType=INTEGER}
  </update>


  <select id="findAll" resultMap="BaseResultMap">
    select
    <include refid="App_Column_List" />
    from airdrop where enable=1 order by start_time
  </select>
</mapper>